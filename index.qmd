---
title: "WORLD MALARIA REPORT 2023 | 2020 - 2022"
format: dashboard
theme: lux
---

```{r}
# Load required packages
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse,
               colorspace,
               plotly,
               reactable,
               bslib,
               bsicons,
               shiny,
               here,
               ggspatial,
               janitor,
               spData,
               sf,
               units,
               rgeoboundaries,
               rnaturalearth,
               rnaturalearthdata,
               countrycode,
               htmltools,
               reactable,
               lubridate,
               dplyr,
               scales,
               prettydoc,
               skimr,
               ggplot2,
               ggiraph,
               gganimate,
               tidyr,
               readr,
               gifski,
               png, 
               scales,
               patchwork,
               leaflet,
               flextable)


```

```{r echo=FALSE, message=FALSE, warning=FALSE}
# Load data files

wmr23_funding <- read_csv(here("data/WMR2023_Funding.csv"))

wmr23_cases <- read_csv(here("data/WMR2023_cases.csv"))

wmr23_regional <- read_csv(here("data/WMR2023_regional.csv"))

wmr23_funding <- clean_names(wmr23_funding)

wmr23_cases <- clean_names(wmr23_cases)

wmr23_regional <- clean_names(wmr23_regional)

nigeria <- geoboundaries(country = "Nigeria", adm_lvl = 1)

state_mal <- read_csv(here("data/nig_state_2021.csv"))

```

```{r}
# Preparing the data

# pivot the funding data 
wmr23_fund_long <- wmr23_funding %>% 
  pivot_longer(
    cols = -c(region, country, reported_by, year),
    names_to = "source",
    values_to = "value"
  )

# filter the regional data to keep only 2020 to 2023 cases

wmr_reg20_23 <- wmr23_regional %>% 
  filter(year %in% c("2020", "2021", "2022"))

# filter out regional totals from the dataset

wmr_reg20_23 <- wmr_reg20_23 %>% 
  filter(region != "Total")

# Calculate the proportion of cases by population and by region

wmr_reg20_23 <- wmr_reg20_23 %>% 
  group_by(region, year) %>% 
  mutate(prop_cases = cases_point/population,
         prop_deaths = deaths_point/cases_point,
         deaths_pop = deaths_point/population
         )

# Getting the total cases from 2020 - 2023 for each country

cntry_mal_fil <- wmr23_cases %>% 
  filter(year %in% c("2020", "2021", "2022"))

cntry_mal_cases <- cntry_mal_fil %>% 
  group_by(region, country) %>% 
  summarise(total_cases = sum(cases_point, na.rm = TRUE),
         total_deaths = sum(deaths_point, na.rm = TRUE))





```

```{r include=FALSE, echo=FALSE, message=FALSE}
country_data <- data.frame(
  region = countrycode::codelist$region,
  country = countrycode::codelist$country.name.en,
  iso = countrycode::codelist$iso3c
 
)
# Find the mismatches in the country names

setdiff(cntry_mal_cases$country, country_data$country)

cntry_mal_cases <- cntry_mal_cases %>% 
  mutate(country =
           case_when(
             country == "Cabo Verde" ~ "Cape Verde",
             country == "Congo" ~ "Congo - Brazzaville",
             country == "C\xf4te d\x92Ivoire" ~ "Côte d’Ivoire",
             country == "Democratic Republic of the Congo" ~ "Congo - Kinshasa",
             country == "Sao Tome and Principe" ~ "São Tomé & Príncipe",
             country == "United Republic of Tanzania" ~ "Tanzania",
             country == "Syrian Arab Republic" ~ "Syria",
             country == "Democratic People\x92s Republic of Korea" ~ "North Korea",
             country == "Myanmar" ~ "Myanmar (Burma)",
             country == "Lao People\x92s Democratic Republic" ~ "Laos",
             country == "Republic of Korea" ~ "South Korea",
             country == "Viet Nam" ~ "Vietnam",
             TRUE ~ country
           ))


world_data <- ne_countries(scale = "medium", returnclass = "sf")

```

```{r}
# Prepare map data

cntry_mal_cases <- cntry_mal_cases %>% 
  mutate(iso_a3 = countrycode(country, 'country.name', 'iso3c'))

world_cases <- world_data %>% 
  left_join(cntry_mal_cases, by = c("iso_a3" = "iso_a3"))
```

```{r}
# Prepare total cases and deaths

summ_cases_deaths <- cntry_mal_fil %>% 
  filter(year %in% c("2020", "2021", "2022")) %>% 
  group_by(year) %>% 
  summarise(
    total_cases = sum(cases_point, na.rm = TRUE),
    total_deaths = sum(deaths_point, na.rm = TRUE)
  )

total_cases_2020 <- summ_cases_deaths$total_cases[summ_cases_deaths$year==2020]

total_cases_2021 <- summ_cases_deaths$total_cases[summ_cases_deaths$year==2021]

total_cases_2022 <- summ_cases_deaths$total_cases[summ_cases_deaths$year==2022]

total_deaths_2020 <- summ_cases_deaths$total_deaths[summ_cases_deaths$year==2020]

total_deaths_2021 <- summ_cases_deaths$total_deaths[summ_cases_deaths$year==2021]

total_deaths_2022 <- summ_cases_deaths$total_deaths[summ_cases_deaths$year==2022]


```

```{r}
# Plot case map

case_map <- ggplot(data = world_cases)+
  geom_sf_interactive(aes(fill = total_cases,
              tooltip = paste(country,": ", total_cases, " cases")),
          color = "grey") +
  scale_fill_viridis_c(labels = scales::comma)+
  theme_void()+
  labs(
    title = "Total Number of Malaria Cases by Country: 2020-2022",
    fill = "Total Cases",
    caption = "Source: World Malaria Report 2023"
  )+
  theme(plot.title = element_text(hjust = 0.5))


```

```{r}
# Plot death map

death_map <- ggplot(data = world_cases)+
  geom_sf_interactive(aes(fill = total_deaths, tooltip = paste(country, ": ", total_deaths, "deaths" )), 
                      color="grey") +
  scale_fill_viridis_c(labels = scales::comma)+
  theme_void()+
  labs(
    title = "Total Number of Malaria Deaths by Country: 2020-2022",
    fill = "Total Deaths",
    caption = "Source: World Malaria Report 2023"
  )+
  theme(plot.title = element_text(hjust = 0.5))

```

```{r}
# A look at the funding data
mal_tot_fund <- wmr23_fund_long %>% 
  group_by(region, country, year) %>% 
  summarise(total_funding = sum(value, na.rm = TRUE))

mal_tot_fund <- mal_tot_fund %>% 
  mutate(country =
           case_when(
             country == "Cabo Verde" ~ "Cape Verde",
             country == "Congo" ~ "Congo - Brazzaville",
             country == "C\xf4te d'Ivoire" ~ "Côte d’Ivoire",
             country == "Democratic Republic of the Congo" ~ "Congo - Kinshasa",
             country == "Sao Tome and Principe" ~ "São Tomé & Príncipe",
             country == "United Republic of Tanzania" ~ "Tanzania",
             country == "Syrian Arab Republic" ~ "Syria",
             country == "Democratic People's Republic of Korea" ~ "North Korea",
             country == "Myanmar" ~ "Myanmar (Burma)",
             country == "Lao People's Democratic Republic" ~ "Laos",
             country == "Republic of Korea" ~ "South Korea",
             country == "Yemen9" ~ "Yemen",
             country == "South Sudan8" ~ "South Sudan",
             country == "GuineaBissau" ~ "Guinea-Bissau",
             country == "Venezuela (Bolivarian Republic of)" ~ "Venezuela",
             country == "TimorLeste" ~ "Timor-Leste",
             country == "Viet Nam" ~ "Vietnam",
             country == "El Salvaldor" ~ "El Salvador",
             TRUE ~ country
           ))


mal_fund_case <- mal_tot_fund %>% 
  left_join(cntry_mal_fil,
            by = c("region" ="region", "country" = "country", "year"= "year"),relationship = "many-to-many") %>% 
  select(-population, -cases_upper, -cases_lower, -deaths_lower, -deaths_upper)  
 


total_cases_by_country <- mal_fund_case %>%
  group_by(country) %>%
  summarize(total_cases = sum(cases_point, na.rm = TRUE)) %>%
  arrange(desc(total_cases)) %>%
  slice_head(n = 10)



# Filter the original data to include only the top 10 countries
top10_countries_data <- mal_fund_case %>%
  filter(country %in% total_cases_by_country$country)

fund_top_10 <- ggplot(data = top10_countries_data, aes(x = factor(year), y = total_funding, fill = country)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_y_continuous(labels = scales::comma)+
  labs(title = "Total Funding for Top 10 Countries by Malaria Cases",
       x = "Year",
       y = "Total Funding",
       fill = "Country") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

```



```{r}
# Prepare data for total annual funding for 2020 - 2022

total_annual_funding <- wmr23_fund_long %>%
  group_by(year) %>%
  summarize(total_funding = sum(value, na.rm = TRUE)) %>% 
  filter(year %in% c("2020", "2021", "2022"))

# Total funding for 2020
total_funding_2020 <- total_annual_funding$total_funding[total_annual_funding$year == 2020]


# Total funding for 2021
total_funding_2021 <- total_annual_funding$total_funding[total_annual_funding$year == 2021]


# Total funding for 2022
total_funding_2022 <- total_annual_funding$total_funding[total_annual_funding$year == 2022]


# Overall Funding for the 3 years

total_fund_20_22 <- scales::dollar(sum(total_annual_funding$total_funding))


# Total Cases for 2020-2022

total_cases_20_22 <- scales::comma(sum(summ_cases_deaths$total_cases))

# Total Deaths for 2020-2022

total_deaths_20_22 <- scales::comma(sum(summ_cases_deaths$total_deaths))





```

```{r}
# Table with Top 10 Countries by Cases, Deaths, and funding

top10_cases <- cntry_mal_cases %>% 
  arrange(desc(total_cases)) %>% 
  head(10)

# Add total funding to the top 5 cases data
top10_cases_fund <- top10_cases %>% 
  left_join(mal_fund_case %>% 
              group_by(country) %>% 
              summarize(total_funding = sum(total_funding, na.rm = TRUE), .groups = "drop"),
            by = "country") %>% 
  arrange(desc(total_cases)) %>% 
  mutate(total_cases = scales::comma(total_cases),
         total_deaths = scales::comma(total_deaths),
         total_funding = scales::dollar(total_funding)) %>% 
  select(country, total_cases, total_deaths, total_funding)


```

```{r}
# Load the funding data
# Summarize the total funding by country
total_funding_by_country <- mal_fund_case %>%
  group_by(country) %>%
  summarize(total_funding = sum(total_funding, na.rm = TRUE))

# Add ISO3 codes to the data
total_funding_by_country <- total_funding_by_country %>%
  mutate(iso_a3 = countrycode(country, 'country.name', 'iso3c'))

# Load world geometry data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Merge the geometry data with the funding data
world_funding <- world %>%
  left_join(total_funding_by_country, by = c("iso_a3" = "iso_a3"))

# Filter out countries with no funding data
world_funding <- world_funding %>%
  filter(!is.na(total_funding))

# Define color palette
funding_bins <- c(0, 1000000, 10000000, 100000000, 1000000000,Inf)
funding_palette <- colorBin("YlGnBu", domain = world_funding$total_funding, bins = funding_bins)
```

```{r}

# Create the interactive map
leaf_fund_map <- leaflet(world_funding) %>%
  addProviderTiles(providers$Esri.WorldStreetMap) %>%
  addPolygons(
    fillColor = ~funding_palette(total_funding),
    weight = 1,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7,
    highlight = highlightOptions(
      weight = 2,
      color = "#666",
      dashArray = "",
      fillOpacity = 0.7,
      bringToFront = TRUE
    ),
    label = ~paste0(country, ": $", scales::comma(total_funding)),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto"
    )
  ) %>%
  addLegend(
    pal = funding_palette,
    values = world_funding$total_funding,
    title = "Total Funding",
    opacity = 0.7,
    position = "bottomright",
    labFormat = labelFormat(prefix = "$", big.mark = ",", between = " - ")
  )%>%
  addControl(
    html = '<div style="font-size:20px;font-weight:bold;">Total Funding by Country 2020-2022</div>',
    position = "topright"
  ) %>% 
  addControl(
    html = '<div style="font-size:12px;">Source: World Malaria Report 2023</div>',
    position = "bottomleft"
  )

```

```{r}
# Prepare the case data for the leaflet map

# Summarize the total cases by country
total_cases_by_country <- mal_fund_case %>%
  group_by(country) %>%
  summarize(total_cases = sum(cases_point, na.rm = TRUE))

# Add ISO3 codes to the data
total_cases_by_country <- total_cases_by_country %>%
  mutate(iso_a3 = countrycode(country, 'country.name', 'iso3c'))

# Load world geometry data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Merge the geometry data with the cases data
world_cases <- world %>%
  left_join(total_cases_by_country, by = c("iso_a3" = "iso_a3"))

# Filter out countries with no cases data
world_cases <- world_cases %>%
  filter(!is.na(total_cases))
```

```{r}
# Plot the case map using the leaflet function

# Define color palette
cases_bins <- c(0, 100000, 1000000, 10000000, 100000000, 1000000000,Inf)
cases_palette <- colorBin("YlOrRd", domain = world_cases$total_cases, bins = cases_bins)

# Create the interactive map
leaf_case_map <- leaflet(world_cases) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~cases_palette(total_cases),
    weight = 1,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7,
    highlight = highlightOptions(
      weight = 2,
      color = "#666",
      dashArray = "",
      fillOpacity = 0.7,
      bringToFront = TRUE
    ),
    label = ~paste0(country, ": ", scales::comma(total_cases), " cases"),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto"
    )
  ) %>%
  addLegend(
    pal = cases_palette,
    values = world_cases$total_cases,
    title = "Total Cases",
    opacity = 0.7,
    position = "bottomright",
    labFormat = labelFormat(big.mark = ",", between = " - ")
  ) %>%
  addControl(
    html = '<div style="text-align: center; font-size: 20px; font-weight: bold;">Total Number of Malaria Cases by Country: 2020-2022</div>',
    position = "topright",
    className = "map-title"
  ) %>%
  addControl(
    html = '<div style="text-align: center; font-size: 12px;">Source: World Malaria Report 2023</div>',
    position = "bottomleft",
    className = "map-caption"
  ) 
```

```{r}
# Prepare the data for the cases of death map

# Summarize the total deaths by country
total_deaths_by_country <- mal_fund_case %>%
  group_by(country) %>%
  summarize(total_deaths = sum(deaths_point, na.rm = TRUE))

# Add ISO3 codes to the data
total_deaths_by_country <- total_deaths_by_country %>%
  mutate(iso_a3 = countrycode(country, 'country.name', 'iso3c'))

# Load world geometry data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Merge the geometry data with the deaths data
world_deaths <- world %>%
  left_join(total_deaths_by_country, by = c("iso_a3" = "iso_a3"))

# Filter out countries with no deaths data
world_deaths <- world_deaths %>%
  filter(!is.na(total_deaths))

```

```{r}
# Plot the death map using the leaflet function

# Define color palette
deaths_bins <- c(0, 1000, 10000, 100000, 1000000, Inf)
deaths_palette <- colorBin("YlGnBu", domain = world_deaths$total_deaths, bins = deaths_bins)

# Create the interactive map

leaf_death_map <- leaflet(world_deaths) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~deaths_palette(total_deaths),
    weight = 1,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7,
    highlight = highlightOptions(
      weight = 2,
      color = "#666",
      dashArray = "",
      fillOpacity = 0.7,
      bringToFront = TRUE
    ),
    label = ~paste0(country, ": ", scales::comma(total_deaths), " deaths"),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto"
    )
  ) %>%
  addLegend(
    pal = deaths_palette,
    values = world_deaths$total_deaths,
    title = "Total Deaths",
    opacity = 0.7,
    position = "bottomright",
    labFormat = labelFormat(big.mark = ",", between = " - ")
  ) %>%
  addControl(
    html = '<div style="text-align: center; font-size: 20px; font-weight: bold;">Total Number of Malaria Deaths by Country: 2020-2022</div>',
    position = "topright",
    className = "map-title"
  ) %>%
  addControl(
    html = '<div style="text-align: center; font-size: 12px;">Source: World Malaria Report 2023</div>',
    position = "bottomleft",
    className = "map-caption"
  ) 

```



```{r}
# Prepare download data

# Load the CSV files
wmr23_funding2 <- read_csv("data/WMR2023_Funding.csv")
wmr23_cases2 <- read_csv("data/WMR2023_Cases.csv")
wmr23_regional2 <- read_csv("data/WMR2023_regional.csv")

# Convert Encoding to UTF-8 for each column if necessary
wmr23_funding2 <- as.data.frame(lapply(wmr23_funding2, function(x) iconv(x, from = "", to = "UTF-8")))
wmr23_cases2 <- as.data.frame(lapply(wmr23_cases2, function(x) iconv(x, from = "", to = "UTF-8")))
wmr23_regional2 <- as.data.frame(lapply(wmr23_regional2, function(x) iconv(x, from = "", to = "UTF-8")))
```

```{r}
# Remove rows with NA values in the year column
wmr23_fund_long <- wmr23_fund_long %>%
  filter(!is.na(year))

wmr23_fund_long <- wmr23_fund_long %>%
  mutate(source = recode(source,
                         "global_fund" = "Global Fund",
                         "pmi_usaid" = "PMI USAID",
                         "uk" = "UK",
                         "government_nmp" = "Government NMP",
                         "who" = "WHO",
                         "world_bank" = "World Bank",
                         "other_bilaterals" = "Other Bilaterals",
                         "unicef" = "UNICEF",
                         "other_contributions" = "Other Contributions",))

# Summarize total funding by source for each year
funding_by_source <- wmr23_fund_long %>%
  group_by(year, source) %>%
  summarize(total_funding = sum(value, na.rm = TRUE), .groups = "drop") %>%
  arrange(year, desc(total_funding))

# Reorder source within each year
funding_by_source <- funding_by_source %>%
  group_by(year) %>%
  mutate(source = fct_reorder(source, total_funding, .desc = TRUE)) %>%
  ungroup()


# Summarize total funding by reported_by for each year
funding_by_reported <- wmr23_fund_long %>%
  group_by(year, reported_by) %>%
  summarize(total_funding = sum(value, na.rm = TRUE)) %>%
  arrange(year, desc(total_funding))

```

```{r}
# Plot total funding by reported_by for each year
fund_report <- ggplot(funding_by_reported, aes(x = year, y = total_funding, fill = reported_by)) +
  geom_col(position = "dodge") +
  labs(title = "Total Funding by Reported By for Each Year",
       x = "Year",
       y = "Total Funding",
       fill = "Reported By",
       caption = "Source: World Malaria Report 2023") +
  scale_y_continuous(labels = scales::comma) +
  scale_x_continuous(breaks = unique(funding_by_reported$year)) +
  theme_minimal()
```

```{r}
# Plot total funding by source for each year
fund_source <- ggplot(funding_by_source, aes(x = year, y = total_funding, fill = source)) +
  geom_col() +
  facet_wrap(~ year, scales = "free_x") +
  labs(title = "Total Funding by Source for Each Year",
       x = "Year",
       y = "Total Funding",
       fill = "Source",
       caption = "Source: World Malaria Report 2023") +
  scale_y_continuous(labels = scales::comma) +
  scale_x_continuous(breaks = unique(funding_by_source$year)) +
  theme_minimal() #+
  #theme(axis.text.x = element_text(angle = 45, hjust = 1))  
```




```{r}
# Summarizing cases, death, and funding data for Nigeria

# Filter cases, deaths, and funding for Nigeria
nigeria_cases <- wmr23_cases %>%
  filter(country == "Nigeria" & year %in% 2020:2022) %>%
  summarize(total_cases = sum(cases_point, na.rm = TRUE)) %>%
  pull(total_cases)

nigeria_deaths <- wmr23_cases %>%
  filter(country == "Nigeria" & year %in% 2020:2022) %>%
  summarize(total_deaths = sum(deaths_point, na.rm = TRUE)) %>%
  pull(total_deaths)

nigeria_funding <- wmr23_fund_long %>%
  filter(country == "Nigeria" & year %in% 2020:2022) %>%
  summarize(total_funding = sum(value, na.rm = TRUE)) %>%
  pull(total_funding)


# Creating formatted values

nigeria_cases <- scales::comma(nigeria_cases)
nigeria_deaths <- scales::comma(nigeria_deaths)
nigeria_funding <- scales::dollar(nigeria_funding)


# Nigeria Deaths by Year
nigeria_deaths_by_year <- wmr23_cases %>%
  filter(country == "Nigeria") %>%
  group_by(year) %>%
  summarize(total_deaths = sum(deaths_point, na.rm = TRUE)) %>%
  mutate(total_deaths = scales::comma(total_deaths))

nig_deaths_20 <- nigeria_deaths_by_year %>% 
  filter(year == 2020) %>% 
  summarize(totals = total_deaths) %>%
  pull(totals)

nig_deaths_21 <- nigeria_deaths_by_year %>% 
  filter(year == 2021) %>% 
  summarize(totals = total_deaths) %>%
  pull(totals)

nig_deaths_22 <- nigeria_deaths_by_year %>% 
  filter(year == 2022) %>% 
  summarize(totals = total_deaths) %>%
  pull(totals)


```


```{r}
# Join the Nigeria map dataset with the State Malaria dataset

state_data <- nigeria %>% 
  left_join(state_mal,
            by = c("shapeISO"))



# Create the Leaflet map with state boundaries
nigeria_map <- leaflet(state_data) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~colorNumeric("Blues", domain = state_data$cases)(cases),
    weight = 1,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 1,
    highlight = highlightOptions(
      weight = 2,
      color = "#666",
      dashArray = "",
      fillOpacity = 1,
      bringToFront = TRUE
    ),
    label = ~paste("State:", shapeName, "Cases:", scales::comma(cases)),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto"
    )
  ) %>%
  addLegend(
    pal = colorNumeric("Blues", domain = state_data$cases),
    values = state_data$cases,
    title = "Malaria Cases",
    opacity = 0.7,
    position = "bottomright"
  ) %>%
  addControl(
    html = '<div style="text-align: center; font-size: 15px; font-weight: bold;">Malaria Cases by State in Nigeria</div>',
    position = "topright",
    className = "map-title"
  )%>%
  addControl(
    html = '<div style="text-align: center; font-size: 12px;">Source: WHO: Report on Malaria in Nigeria 2022</div>',
    position = "bottomleft",
    className = "map-caption"
  ) 

```








# CASE REPORT 2023

##  {height="20%"}

```{r}
value_box(
  title = tags$span("Total Cases: 2020",style = "font-size: 25px;"),
  value = tags$span(scales::comma(total_cases_2020), style = "font-size: 40px; font-weight:bold"),
  showcase = bsicons::bs_icon("1-circle-fill"),
  theme = value_box_theme(bg = "#6c6f78")
)


```

```{r}
value_box(
  title = tags$span("Total Cases: 2021",style = "font-size: 25px;"),
  value = tags$span(scales::comma(total_cases_2021), style = "font-size: 40px; font-weight:bold"),
  showcase = bsicons::bs_icon("2-circle-fill"),
  theme = value_box_theme(bg = "#0804f9")
)

```

```{r}
value_box(
  title = tags$span("Total Cases: 2022",style = "font-size: 25px;"),
  value = tags$span(scales::comma(total_cases_2022), style = "font-size: 40px; font-weight:bold"),
  showcase = bsicons::bs_icon("3-circle-fill"),
  theme = value_box_theme(bg = "#003399")
)
```

##  {height="20%"}

```{r}
value_box(
  title = tags$span("Total Deaths: 2020",style = "font-size: 25px;"),
  value = tags$span(scales::comma(total_deaths_2020), style = "font-size: 50px; font-weight:bold"),
  showcase = bsicons::bs_icon("4-circle-fill"),
  theme = value_box_theme(bg = "#6e3326")
)


```

```{r}
value_box(
  title = tags$span("Total Deaths: 2021",style = "font-size: 25px;"),
  value = tags$span(scales::comma(total_deaths_2021), style = "font-size: 50px; font-weight:bold"),
  showcase = bsicons::bs_icon("5-circle-fill"),
  theme = value_box_theme(bg = "#d28ca7")
)

```

```{r}
value_box(
  title = tags$span("Total Deaths: 2022",style = "font-size: 25px;"),
  value = tags$span(scales::comma(total_deaths_2022), style = "font-size: 50px; font-weight:bold"),
  showcase = bsicons::bs_icon("6-circle-fill"),
  theme = value_box_theme(bg = "#f6adc6")
)
```

##  {height="60%"}

```{r}

leaf_case_map
```

```{r}

leaf_death_map
```

# FUNDING

##  {height="15%"}

```{r}
value_box(
  title = tags$span("Total Funding: 2020", style = "font-size: 25px;"),
  value = tags$span("$", scales::comma(total_funding_2020), style = "font-size: 40px; font-weight:bold"),
  showcase = bsicons::bs_icon("bank"),
  theme = value_box_theme(bg = "#286428")
)
```

```{r}
value_box(
  title = tags$span("Total Funding: 2021",style = "font-size: 25px;"),
  value = tags$span("$", scales::comma(total_funding_2021), style = "font-size: 40px; font-weight:bold"),
  showcase = bsicons::bs_icon("bank"),
  theme = value_box_theme(bg = "#3b7a34")
)

```

```{r}
value_box(
  title = tags$span("Total Funding: 2022",style = "font-size: 25px;"),
  value = tags$span("$", scales::comma(total_funding_2022), style = "font-size: 40px; font-weight:bold"),
  showcase = bsicons::bs_icon("bank2"),
  theme = value_box_theme(bg = "#283c28")
)

```

##  {height="70%"}

###  {width="45%"}

```{r}
leaf_fund_map
```

###  {.tabset}

#### Top Ten Countries by Cases

```{r}
# Table with Top 10 Countries by Cases, Deaths, and funding

reactable(top10_cases_fund, columns = list(
  region = colDef(name = "Region", align = "left"),
  country = colDef(name = "Country", align = "left"),
  total_cases = colDef(name = "Total Cases", align = "right"),
  total_deaths = colDef(name = "Total Deaths", align = "right"),
  total_funding = colDef(name = "Total Funding", align = "right")
))


```

#### Funding Sources

```{r}
fund_source
```

#### Country vs Donor Funding

```{r}
fund_report
```

# SUMMARY

The World Malaria Report 2023 provides a comprehensive assessment of trends in malaria control and elimination across the globe. The report highlights the increasing burden of malaria and examines the association with the funding available for malaria interventions. The data presented in this dashboard provides insights into the total number of malaria cases and deaths by country from 2020 to 2022. 

The total funding for malaria interventions for the period under review was `r total_fund_20_22`, showing the contributions from various sources and reported by different organizations. The total number of cases across all countries for the period under review was `r total_cases_20_22`, with Nigeria having the highest burden across the three years, and the total deaths was `r total_deaths_20_22`, also with Nigeria having the highest numbers. 

These are very large numbers in terms of funding, cases identified, and deaths reported, highlighting the need for continued efforts and investments in malaria control and elimination efforts.

##
Spotlight on Nigeria

## 
### {width=70%}

```{r}
nigeria_map
```

### {width=30%}

Nigeria makes a significant contribution to the total number of malaria cases and deaths, with `r nigeria_cases` cases and `r nigeria_deaths` deaths reported from 2020 to 2022. The total funding for malaria interventions in Nigeria for the same period was `r nigeria_funding`.

The investments in the interventions have led to a slight reduction in malaria deaths in Nigeria over the three years with `r nig_deaths_20` deaths in 2020, `r nig_deaths_21` in 2021, and `r nig_deaths_22` in 2022.

However, there is still a lot to be done to reduce both incidence and mortality in Nigeria and all other countries where Malaria is endemic.




# DOWNLOAD DATA

The data used in this dashboard can be downloaded from the links below in the relevant tabs:

## 

###  {.tabset}

#### WMR2023 Funding Data

```{r}
# Create download buttons and interactive tables
htmltools::browsable(
  tagList(
    reactable(wmr23_funding2, elementId = "wmr23-funding-table", searchable = TRUE, filterable = TRUE),
    tags$button("Download WMR2023_Funding.csv", 
                onclick = "Reactable.downloadDataCSV('wmr23-funding-table')")
  )
)

```

#### WMR2023 Cases Data

```{r}
# Create download buttons and interactive tables
htmltools::browsable(
  tagList(
    reactable(wmr23_cases2, elementId = "wmr23-cases-table", searchable = TRUE, filterable = TRUE),
    tags$button("Download WMR2023_Cases.csv", 
                onclick = "Reactable.downloadDataCSV('wmr23-cases-table')")
  )
)
```

#### WMR2023 Regional Data

```{r}
# Create download buttons and interactive tables
htmltools::browsable(
  tagList(
    reactable(wmr23_regional2, elementId = "wmr23-regional-table", searchable = TRUE, filterable = TRUE),
    tags$button("Download WMR2023_regional.csv", 
                onclick = "Reactable.downloadDataCSV('wmr23-regional-table')")
  )
)
```





# ABOUT

Tracking progress and gaps in the global response to Malaria

Each year, WHO’s World Malaria report provides a comprehensive and up-to-date assessment of trends in malaria control and elimination across the globe.

This presentation focuses on a subset of the report and will try to highlight the increasing burden and examine if there is any association with the funding available for malaria interventions.

You can download a copy of the report at this link: https://www.who.int/teams/global-malaria-programme/reports/world-malaria-report-2023







